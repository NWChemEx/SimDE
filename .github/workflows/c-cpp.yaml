name: C_C++_CI

on:
  pull_request:
    branches:
      - master

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v1
      with: 
         python-version: '3.x'
    - name: get-gcc
      run: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install gcc-8 g++-8 gfortran-8
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 95 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8
            gcc      --version
            g++      --version
            gfortran --version
            gcov     --version
    - name: get-blas-lapack
      run:  sudo apt-get install libopenblas-base libopenblas-dev libgslcblas0 libgsl-dev liblapacke liblapacke-dev
    - name: get-boost
      run:  sudo apt-get install libboost-dev libboost-all-dev
    - name: get-eigen3
      run:  sudo apt-get install libeigen3-dev
    - name: get-openmpi
      run: |
            sudo apt-get install openmpi-bin libopenmpi-dev
            mpicc -show
            mpiexec --version
    - name: get-gcovr
      run:  pip install gcovr
    - name: get-cmake
      run: |
            wget https://github.com/Kitware/CMake/releases/download/v3.16.3/cmake-3.16.3-Linux-x86_64.sh
            yes | /bin/sh cmake-3.16.3-Linux-x86_64.sh
    - name: cmake
      env:
            CPP_GITHUB_TOKEN: ${{ secrets.CPP_GITHUB_TOKEN }}
      run: |
            export INSTALL_DIR=`pwd`/install
            echo "PropertyType: INSTALL_DIR=${INSTALL_DIR}"
            cmake-3.16.3-Linux-x86_64/bin/cmake -H. -Bbuild -DCMAKE_PREFIX_PATH=${INSTALL_DIR} -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=TRUE -DCATCH_ENABLE_COVERAGE=ON -DCMAKE_CXX_FLAGS="--coverage -std=c++17" -DCMAKE_C_FLAGS="--coverage" -DCMAKE_EXE_LINKER_FLAGS="-fprofile-arcs" -DCPP_GITHUB_TOKEN=$CPP_GITHUB_TOKEN -DCMAKE_BUILD_TYPE=Debug
    - name: ctest
      run: |
            #ctest is annoying in that it caches all output until it is finished keeping you in the dark about
            #whether things are working as they should.
            #cmake-3.16.3-Linux-x86_64/bin/ctest --build-and-test build build --build-nocmake --build-generator "Unix Makefiles" --test-command make test
            cd build
            make
            make test
    - name: gcovr
      run: |
            cd ..
            gcovr --root PropertyTypes --filter PropertyTypes --exclude PropertyTypes/tests --xml PropertyTypes/coverage.xml
            ls -al PropertyTypes
    - uses: codecov/codecov-action@v1
      with:
         token: ${{ secrets.CODECOV_TOKEN }}
         file: ./coverage.xml
